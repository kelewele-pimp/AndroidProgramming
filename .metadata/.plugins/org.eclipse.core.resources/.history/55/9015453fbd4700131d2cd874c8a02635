package CustomView;

import com.example.compass.R;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Paint;
import android.util.AttributeSet;
import android.view.View;

public class CompassView extends View {
	
	private Paint markerPaint; 
	private Paint textPaint; 
	private Paint circlePaint; 
	private String northString; 
	private String eastString; 
	private String southString; 
	private String westString; 
	private int textHeight; 

	public CompassView(Context context) {
		super(context);
		initCompassView(); 
	}

	public CompassView(Context context, AttributeSet attrs, int defStyleAttr) {
		super(context, attrs, defStyleAttr);
		initCompassView(); 
	}

	public CompassView(Context context, AttributeSet attrs) {
		super(context, attrs);
		initCompassView(); 
	}
	
	private void initCompassView(){
		setFocusable(true);
		
		Resources r = this.getResources(); 
		circlePaint = new Paint(Paint.ANTI_ALIAS_FLAG); 
		circlePaint.setColor(r.getColor(R.color.background_color));
		circlePaint.setStrokeWidth(1);
		circlePaint.setStyle(Paint.Style.FILL_AND_STROKE);
		
		northString = r.getString(R.string.cardinal_north); 
		eastString = r.getString(R.string.cardinal_east); 
		southString = r.getString(R.string.cardinal_south); 
		westString = r.getString(R.string.cardinal_west);
		
		
	}

	@Override
	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
		//The compass is a circle that fills as much space as possible.
		//Set the measured dimensions by figuring out the shortest boundary, 
		//height or width
		
		int measuredWidth = measure(widthMeasureSpec); 
		int measuredHeight = measure(heightMeasureSpec); 
		
		int d = Math.min(measuredWidth, measuredHeight); 
		
		setMeasuredDimension(d, d);
	}
	
	private int measure(int measureSpec){
		int result = 0; 
		
		//Decode the measurement specifications
		int specMode = MeasureSpec.getMode(measureSpec); 
		int specSize = MeasureSpec.getSize(measureSpec); 
		
		if(specMode == MeasureSpec.UNSPECIFIED){
			//Return a default size of 200 if no bounds are specified
			result = 200; 
		} else {
			//As you want to fil the available space 
			//always return the full available bounds
			result = specSize;
		}
		return result; 
	}

}
